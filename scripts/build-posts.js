// scripts/build-posts.js
const fs = require("fs");
const path = require("path");
const matter = require("gray-matter");
const { remark } = require("remark");
// Correctly import ESM plugins for use with require()
const htmlPlugin = require("remark-html").default;
const breaksPlugin = require("remark-breaks").default;

const postsDirectory = path.join(process.cwd(), "_posts");
// Output to a 'generated' directory within 'lib'
const outputDir = path.join(process.cwd(), "lib", "generated");
const outputFile = path.join(outputDir, "posts.js");

async function generatePostsData() {
    if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
    }

    const fileNames = fs.readdirSync(postsDirectory);
    const posts = [];

    for (const fileName of fileNames) {
        if (!fileName.endsWith(".md")) continue;

        const id = fileName.replace(/\.md$/, "");
        const fullPath = path.join(postsDirectory, fileName);
        const fileContents = fs.readFileSync(fullPath, "utf8");

        const matterResult = matter(fileContents); // Get frontmatter and content

        const contentPreview = matterResult.content.split("\n")[0];

        // Process content for full HTML (used by both original functions)
        const processedContent = await remark()
            .use(htmlPlugin)
            .use(breaksPlugin) // Ensure breaks plugin is used for full content generation
            .process(matterResult.content);
        const contentHtml = processedContent.toString();

        posts.push({
            id,
            title: matterResult.data.title,
            date: matterResult.data.date,
            contentPreview, // First line of markdown content
            contentHtml,    // Full HTML content
        });
    }

    // Sort posts by date (descending, same as original)
    posts.sort((a, b) => (new Date(a.date) < new Date(b.date) ? 1 : -1));

    // Output as a JS module
    const outputContent = `
// This file is auto-generated by scripts/build-posts.js
// Do not edit manually!

export const allPosts = ${JSON.stringify(posts, null, 2)};
`;

    fs.writeFileSync(outputFile, outputContent);
    console.log(`Successfully generated ${outputFile} with ${posts.length} posts.`);
}

generatePostsData().catch(error => {
    console.error("Error generating posts data:", error);
    process.exit(1);
});